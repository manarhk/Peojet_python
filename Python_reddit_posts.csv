title,score,id,subreddit,url,num_comments,body,created
Sunday Daily Thread: What's everyone working on this week?,0,190e683,Python,https://www.reddit.com/r/Python/comments/190e683/sunday_daily_thread_whats_everyone_working_on/,9,"# Weekly Thread: What's Everyone Working On This Week? üõ†Ô∏è

Hello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!

## How it Works:

1. **Show & Tell**: Share your current projects, completed works, or future ideas.
2. **Discuss**: Get feedback, find collaborators, or just chat about your project.
3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.

## Guidelines:

* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.
* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.

## Example Shares:

1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!
2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.
3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!

Let's build and grow together! Share your journey and learn from others. Happy coding! üåü",1704585609.0
Saturday Daily Thread: Resource Request and Sharing! Daily Thread,0,18zlr3i,Python,https://www.reddit.com/r/Python/comments/18zlr3i/saturday_daily_thread_resource_request_and/,1,"# Weekly Thread: Resource Request and Sharing üìö

Stumbled upon a useful Python resource? Or are you looking for a guide on a specific topic? Welcome to the Resource Request and Sharing thread!

## How it Works:

1. **Request**: Can't find a resource on a particular topic? Ask here!
2. **Share**: Found something useful? Share it with the community.
3. **Review**: Give or get opinions on Python resources you've used.

## Guidelines:

* Please include the type of resource (e.g., book, video, article) and the topic.
* Always be respectful when reviewing someone else's shared resource.

## Example Shares:

1. **Book**: [""Fluent Python""](https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008) \- Great for understanding Pythonic idioms.
2. **Video**: [Python Data Structures](https://www.youtube.com/watch?v=pkYVOmU3MgA) \- Excellent overview of Python's built-in data structures.
3. **Article**: [Understanding Python Decorators](https://realpython.com/primer-on-python-decorators/) \- A deep dive into decorators.

## Example Requests:

1. **Looking for**: Video tutorials on web scraping with Python.
2. **Need**: Book recommendations for Python machine learning.

Share the knowledge, enrich the community. Happy learning! üåü",1704499218.0
How to write a python decorator (and why),143,18zxxak,Python,https://www.reddit.com/r/Python/comments/18zxxak/how_to_write_a_python_decorator_and_why/,69,"tldr; Decorators are a nice way to wrap functions in other functions and re-use code  
  
[https://www.jaredbwelch.com/blog/How\_to\_write\_a\_python\_decorator\_and\_why](https://www.jaredbwelch.com/blog/How_to_write_a_python_decorator_and_why)

  
",1704539972.0
Astronomy / Space Science: Working on meteor data,21,1905n4g,Python,https://www.reddit.com/r/Python/comments/1905n4g/astronomy_space_science_working_on_meteor_data/,5,"Hey everyone,

I started with a new ""Space Science with Python"" tutorial and would like to share it with you. It is about tiny dust particles entering our atmosphere: meteors.

Thankfully, the International Astronomical Union (IAU) provides free-accessible datasets with almost 1 Million meteors. These data contain physical and dynamical properties like the brightness of the meteor, its original orbit around the Sun and the appearance coordinates on the sky.

If you are interested, there data is here: [https://ceres.ta3.sk/iaumdcdb/home/catalog/video](https://ceres.ta3.sk/iaumdcdb/home/catalog/video)

But if you are not that deep into this space-scientific field: I started to create some Jupyter Notebooks to work with the data. The objective of my tutorial: first, understanding the meteor physics and then I'll create a Variational Autoencoder based meteor shower detection model.

Anyway, if you are interested, here is the code: [https://github.com/ThomasAlbin/Astroniz-YT-Tutorials/tree/main/Project-Meteor-Science](https://github.com/ThomasAlbin/Astroniz-YT-Tutorials/tree/main/Project-Meteor-Science)

And the corresponding tutorial playlist, and yes, my videos are not fancy YouTube professional productions, I am just a guy sharing his passion with the world: [https://www.youtube.com/watch?v=5FK3dTrW\_Fc&list=PLNvIBWkEdZ2g3ifrQ6O06fkeetf8e1NDg](https://www.youtube.com/watch?v=5FK3dTrW_Fc&list=PLNvIBWkEdZ2g3ifrQ6O06fkeetf8e1NDg)

Cheers,

Thomas",1704563629.0
FIND Arithmetic Slices II - Subsequence - Leetcode 446 #dynamicprogramming,0,190qiuy,Python,https://www.reddit.com/r/Python/comments/190qiuy/find_arithmetic_slices_ii_subsequence_leetcode/,0,[Video Solution](https://youtu.be/y-hIwt_IKl8),1704628268.0
gguf_modeldb - I've created a package for handling llama2 gguf model data and models,1,190kbov,Python,https://www.reddit.com/r/Python/comments/190kbov/gguf_modeldb_ive_created_a_package_for_handling/,3,"GH: [https://github.com/laelhalawani/gguf\_modeldb](https://github.com/laelhalawani/gguf_modeldb) | PYPI: [https://pypi.org/project/gguf-modeldb/](https://pypi.org/project/gguf-modeldb/)

This tool *in an alpha version* helps to manage model data and gguf files. It features a built-in library of 56 total quantizations of several of the best open source instruct models (dolphin, mistral, mixtral, solar, zephyr), with preconfigured formatting information ready to be searched and downloaded with one line of code.

It can work globally for all the projects within an environment, or offer a separate gguf model db for each project. It's a well documented and optimized package. Available for download on pypi with `pip install gguf-modeldb==0.0.1a2`

It can be used easily with packages like llama-cpp-python to offload everything related to model handling. After installing, import
```python 
from gguf_modeldb import ModelDB
```
and that's all you need to get started with the best gguf models on huggingface.
```python
    mdb = ModelDB()
    gguf_path = mdb.find_model('zephyr','q2').download_gguf()
```
Beyond the 56 built-in tested verified models with correct tags configured, with a single url to a hugginface repo page you can add many more models. 
The repo link must lead to a page containing links ending with '.gguf' (such as those offered in the repos by the legend TheBloke i.e. https://huggingface.co/TheBloke/CodeLlama-7B-GGUF). You should probably also provide a few additional optional but recommended arguments such as user/ai/system tags, description and keywords and the model data will be there ready for you when you need it. 
*If you know another platform(s) that hands out gguf models plz let me know*
 
The `ModelData` class provides an object warpper for the data in the `ModelDB` with usfeful methods that automate and abstract away less fun tasks such as downloading the gguf files `model_data.downlad_gguf()`  or even just checking if the file is downloaded `model_data.is_downloaded()`. 
All methods have docstrings and there's an api documentation so if you've got a minute please have a look there for some examples.",1704603974.0
One billion row challenge,171,18zi0o5,Python,https://www.reddit.com/r/Python/comments/18zi0o5/one_billion_row_challenge/,46,"Just saw this repo trending and thought of doing this in different languages, e.g. Python.  


[https://github.com/gunnarmorling/1brc](https://github.com/gunnarmorling/1brc)  


Do you know if it's already available?",1704489824.0
FlaskyLMS - A Simple Leave Management System in Flask with Google Calendar Integration,6,18zy385,Python,https://www.reddit.com/r/Python/comments/18zy385/flaskylms_a_simple_leave_management_system_in/,0,"	  
A simple leave management tool that I built for myself a while ago. Now sharing on GitHub. Not the most pretty looking and lacks many bells and whistles but still gets the main job done xD

* User-friendly leave request process: Employees can easily submit leave requests through a simple and intuitive interface.  

* Admin approval and rejection: Admins can review leave requests, approve or reject them, and provide feedback if needed.
* Email notifications: Both employees and admins receive timely email notifications for new requests, approvals, and rejections.
* Google Calendar integration: Approved leaves are automatically added as events to the admin's Google Calendar, ensuring visibility.

Try or give your feedback: https://github.com/Suleman-Elahi/FlaskyLMS",1704540619.0
"2,000 free sign ups available for the ""Automate the Boring Stuff with Python"" online course. (Jan 2024)",48,18ziobn,Python,https://www.reddit.com/r/Python/comments/18ziobn/2000_free_sign_ups_available_for_the_automate_the/,8,"If you want to learn to code, I've released 2,000 free sign ups for my course following my Automate the Boring Stuff with Python book (each has 1,000 sign ups, use the other one if one is sold out): 

https://udemy.com/course/automate/?couponCode=JAN2024FREE

https://udemy.com/course/automate/?couponCode=JAN2024FREE2

If you are reading this after the sign ups are used up, you can always find [the first 15 of the course's 50 videos are free on YouTube if you want to preview them.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW) YOU CAN ALSO WATCH THE VIDEOS WITHOUT SIGNING UP FOR THE COURSE. All of the videos on the course webpage have ""preview"" turned on. Scroll down to find and click ""Expand All Sections"" and then click the preview link. You won't have access to the forums and other materials, but you can watch the videos.

**NOTE: Be sure to BUY the course for $0, and not sign up for Udemy's subscription plan. The subscription plan is free for the first seven days and then they charge you. It's selected by default. If you are on a laptop and can't click the BUY checkbox, try shrinking the browser window. Some have reported it works in mobile view.**

**I'm also working on another Udemy course** that follows my recent book ""Beyond the Basic Stuff with Python"". So far I have [the first 15 of the planned 56 videos done. You can watch them for free on YouTube.](https://www.youtube.com/watch?v=kSrnLbioN6w&list=PL0-84-yl1fUmeV_2bBSguF_S0TVZk8wow&index=1)

**Frequently Asked Questions:** (*read this before posting questions*)

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is free online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course, but it'll take a while because I have other book projects I'm working on. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with. Check out /r/ProgrammingBuddies",1704491496.0
Summon a Genieüßû‚Äç‚ôÇÔ∏è (Function Decorator) to Generate Agent Powered Function in Runtime,0,190j5le,Python,https://www.reddit.com/r/Python/comments/190j5le/summon_a_genie_function_decorator_to_generate/,0,"As a developer, have you ever dreamed about writing some definitions and annotation in code then ""boom!"" all in a sudden, some genies üßû‚Äç‚ôÇÔ∏è come out and make all your wishes happen? Notice that: **the genies do not write the code for you, instead they just _finish the work_ for you!**

Now Agently framework present a brand new feature **""agent auto function decorator""** for you! Use @<agent instance>.auto_func to decorate your function and feel the magic!

Combining the tools-using abilities we enhanced the Agently agents recently, just open your mind and let's see how fantasy work you can let the agents help you to do.


**Installation**


```shell
pip install -U Agently
```


**Demo Code**:

You can let a search agent to help you find definition on the internet

```python
import Agently

# create a search agent
search_agent = (
    Agently.create_agent()
        .set_settings(""model.OpenAI.auth"", { ""api_key"": """" })
)

# equip search agent with tool ""search_definition""
search_agent.use_public_tools(""search_definition"")

# define your function: input arguments, output data structure requirement, function purpose
# then use decorator to call search agent to help
@search_agent.auto_func
def find_definition(concept_keyword:str) -> {""source"": (""String"", ), ""definition"": (""String"", )}:
    """"""Search your knowledge or the internet to find out the definition of {concept_keyword}.""""""
    return

# do not need to complete the function coding
# just call it and get your result
result = find_definition(""OpenAI"")
```

Result:

```python
{'source': 'Wikipedia', 'definition': ""OpenAI is a U.S. artificial intelligence (AI) research organization founded in December 2015, researching artificial intelligence with the declared intention of developing 'safe and beneficial' artificial general intelligence, which it defines as 'highly autonomous systems that outperform humans at most economically valuable work'.""}
```

You can also let a calculate agent to help you calculate result from natural language input or equation string

```python
import Agently

# of course, you can use Google Gemini to drive the agent too
calculate_agent = (
    Agently.create_agent()
        .set_settings(""current_model"", ""Google"")
        .set_settings(""model.Google.auth"", { ""api_key"": """" })
)

calculate_agent.use_public_tools(""calculate"")

@calculate_agent.auto_func
def calculate_from_str(equation: str) -> { ""steps"": [(""String"", ""one calculate step"")], ""value"": (""Float"", ) }:
    """"""return calculation result of {equation}.""""""
    return
print(calculate_from_str(""3+5‚úï(8+2)-2‚Åí2""))
```

Result:

```python
{'steps': ['3 + 5 * (8 + 2) - 2 / 2', '3 + 5 * 10 - 2 / 2', '3 + 50 - 2 / 2', '3 + 50 - 1', '53 - 1', '52'], 'value': 52.0}
```

**More Details:**
[Open Jupyter document to try more demos about this show case](https://github.com/Maplemx/Agently/blob/main/playground/generate_agent_powered_function_in_runtime_using_decorator.ipynb)

**Project HomePage:** https://github.com/Maplemx/Agently , ‚≠êÔ∏è if you like it~ üôè

**Explore More Show Cases of Agently:** [Visit Our Playground](https://github.com/Maplemx/Agently/blob/main/playground)",1704600267.0
Elden Ring Bot,10,18zohpo,Python,https://www.reddit.com/r/Python/comments/18zohpo/elden_ring_bot/,0,"Hey there,

I've been working on my take at the Elden Ring Bot concept, and would like to share it with the community. It works by processing stacks of frames captured from the game and the sequence of actions last taken, and outputs a distribution probability over all the available actions, from which the next action is picked. The bot runs for a predefined number of steps, after which the run is scored based on damage taken, stamina and mana used, damage dealt and world exploration. The bot's ""brain"" aka the set of parameters used for the data processing step, is updated using a variant of particle swarm optimization I implemented myself. The heavy load is all done in numpy, with a couple helper tools in pandas, opencv and PIL.

In case anyone is interested in checking it out, here's the github link:

[Jalabhar's Elden Bot](https://github.com/Jalabhar/Elden_Bot)

I'll be pleased to hear any suggestions and questions you might have.

Disclaimer: I have already posted about it a few months ago, but since then I have made significant changes and improvements, so I felt like it made sense to post about it once again",1704506578.0
MiniFirehose - A lightweight data buffering and delivery system,1,1900se3,Python,https://www.reddit.com/r/Python/comments/1900se3/minifirehose_a_lightweight_data_buffering_and/,2,"Hi everyone!  
  
I wanted to share a project I made in just a week. It's called MiniFirehose (somewhat similar to AWS Firehose). It's a really simple tool for managing data, kind of like Kafka or MQTT but much easier to use and lighter on resources.  
  
With MiniFirehose, you can collect messages and send them to places like your local filesystem or Amazon S3. It's not complicated to set up, and it's great if you're working on something small and don't need a big system.  
  
Since I made it pretty quickly, there might be some small bugs. If you try it and have any ideas on how to make it better, I'd love to hear from you. Or, if you know other tools like this, let me know! so I don't spend much time on it.  
  
You can check it out here: \[[mini-firehose](https://github.com/waqar-ahmed/mini-firehose)\]. I'm looking forward to hearing what you think!  
  
Thanks!  
",1704550255.0
VisioNomicon - GPT-4V Smart Image Renamer,6,18zovd6,Python,https://www.reddit.com/r/Python/comments/18zovd6/visionomicon_gpt4v_smart_image_renamer/,0,"VisioNomicon is a powerful Python-based command-line utility tool designed to rename image files using the capabilities of GPT-4. Descriptive filenames are generated based on a user given template and the content of the image.

Try it out, and let me know what you guys think! All the details can be found at:

[https://github.com/rehanzo/VisioNomicon](https://github.com/rehanzo/VisioNomicon)",1704507659.0
Polars in Aggregate: A small subselection on where we have been working on.,47,18z2wp7,Python,https://www.reddit.com/r/Python/comments/18z2wp7/polars_in_aggregate_a_small_subselection_on_where/,8,See the blog here: https://pola.rs/posts/polars\_in\_aggregrate-0.20/,1704446816.0
Event Driven vs Loop Driven what's your preference?,69,18z08uh,Python,https://www.reddit.com/r/Python/comments/18z08uh/event_driven_vs_loop_driven_whats_your_preference/,40,"Streamlit is loop driven it runs every time any thing change on the app, is it performance issue for you? do you prefer Event driven framework against loop driven? ",1704436405.0
MineSweeper Game in Python and Tkinter,7,18zaz6v,Python,https://www.reddit.com/r/Python/comments/18zaz6v/minesweeper_game_in_python_and_tkinter/,4,"I made a MineSweeper game using Python and Tkinter.  
  
Code: https://github.com/DataWizual/MineSweeper  
  
Here's the video explaining how I did it: https://www.youtube.com/watch?v=uYv26qoHLN0",1704472322.0
Is style transfer possible in python without downloading heavy packages?,0,18zroew,Python,https://www.reddit.com/r/Python/comments/18zroew/is_style_transfer_possible_in_python_without/,4,"I found this project called arbitrary style transfer in the browser using tensorflow.js: https://reiinakano.com/arbitrary-image-stylization-tfjs/

(source code: https://github.com/reiinakano/arbitrary-image-stylization-tfjs)

This style transfer works in the browser without uploading anything in server, it just installs a smaller version of inception v3 model to transfer style from any image. You just have to select the images from your disk and it stylizes the image.

Though I have found python repositories for arbitrary style transfer but they require lots of things to setup like torch, tensoflow, network models, training datasets and also needs a gpu. Moreover I don't want to use google collab, I want something light weight like that website, but in python so that I can use it in offline mode. (with that low size inception v3 model only)

In short I want some fast style transfer without downloading any heavy python packages on my system.

Comment if you have any project links...",1704516206.0
"Draw2Img: A simple web UI for interactive text-guided image to image generation via SDXL-Turbo, intended for any age and level of expertise.",2,18zd9dx,Python,https://www.reddit.com/r/Python/comments/18zd9dx/draw2img_a_simple_web_ui_for_interactive/,1,"With the release of SDXL-Turbo in late Nov 2023, it became feasible to perform text-guided image to image generation in real-time on a consumer grade GPU. Inspired by this progress and my little cousins' artwork, I put together a web app that integrates an interactive canvas & paint tool with the capabilities of SDXL-Turbo.

The project is called Draw2Img, and I want to share it here in the hopes that you or your family enjoys it as much as we have. What makes this project unique is the combination of:

1) a simple and accessible web based UI for younger or non-technical users

2) the stunning speed & quality of image generation

3) user friendly & LAN party ready (easy to run, multiple concurrent users supported)

Thanks in advance for your feedback and support, cheers!

https://github.com/GradientSurfer/Draw2Img",1704477990.0
Saving Metadata When Using Python Decorators | Jacob Padilla,2,18zexf0,Python,https://www.reddit.com/r/Python/comments/18zexf0/saving_metadata_when_using_python_decorators/,0,"Wrapping one object over another can result in the loss of valuable metadata; that's why using the functools.wraps decorator is crucial when developing your own Python decorators. In this [article](https://jacobpadilla.com/articles/Functools-Deep-Dive), explore the intricacies of functools.wraps and how it works under the hood!",1704482182.0
"PyWindowsScreenCapture, Tool for efficient screen capturing on Windows",1,18zcht6,Python,https://www.reddit.com/r/Python/comments/18zcht6/pywindowsscreencapture_tool_for_efficient_screen/,1,"I stepping into the world of C programming with my latest project, ""Windows Screen Capture DLL,"" and its Python wrapper, ""PyWindowsScreenCapture."" This project represents not just a tool for efficient screen capturing on Windows but also my journey in learning and improving my C programming skills.

\*\*About the Project:\*\*

\- \*\*Windows Screen Capture DLL\*\*: A dynamic link library I developed to push the boundaries of screen capture performance on Windows platforms.

\- \*\*PyWindowsScreenCapture\*\*: A Python wrapper that provides an easy-to-use interface to the DLL, making it accessible for Python developers.

\*\*Key Features:\*\*

\- Optimized for performance, potentially outperforming MSS (Python Screen Capture).

\- Multi-monitor support, capturing high-resolution screens efficiently.

\- Designed with simplicity and minimal dependencies in mind.

The motivation behind this project was not only to create a high-performance tool but also to challenge myself and enhance my understanding of C programming. As my first serious foray into C, I'm keen on receiving feedback, suggestions, and contributions from the community to help me grow as a developer.

While this project is still in its beta phase, I am proud of what I've accomplished and am excited to see how it can evolve with community input. Whether you're interested in high-speed screen capturing or have insights into C development, I welcome your thoughts and contributions.

You can check out the project and contribute here:

\- DLL: https://github.com/offerrall/WindowsScreenCapture

\- Python Wrapper: https://github.com/offerrall/PyWindowsScreenCapture

I‚Äôm looking forward to your feedback and suggestions. Thank you for being a part of my programming journey!",1704476098.0
Traktstats without premium,0,18zachx,Python,https://www.reddit.com/r/Python/comments/18zachx/traktstats_without_premium/,3,"Hi Everyone,
I wanted to share my python project, this python [program](https://github.com/Ahmedazim7804/trakt_vip_stats) uses trakt and tmdb api to generate all-time-stats like the official feature of trakt which requires subscription.
You can then use [this app](https://github.com/Ahmedazim7804/traktstats_app) to view those stats visually.
if you have any feedback, i would love to hear it.

Edit :- English is not my first language, so excuse any grammer mistake.",1704470750.0
LLama.cpp AI reddit poster / commenter,0,18za06z,Python,https://www.reddit.com/r/Python/comments/18za06z/llamacpp_ai_reddit_poster_commenter/,0,"These two scripts use llama.cpp but note - rename the llama.cpp main.exe file to main2.exe or change the bits in the code to main.exe . You can change the AI model in the code when it runs the main2.exe to a gguf model of your choice. 

Both ask what subreddit you want to post to and with what prompt. The scripts use reddit API which you have to have. I dunno about the reddit AI policy. I tested it on a subreddit called Hergidonia I made up to play with it. Install the modules in the beginning of the script and llama.cpp and it should work fine if the main.exe is in the folder you run it and the ai model points to your gguf model. 

https://pastebin.com/yqTq1aMt",1704469899.0
API Logic Server - Kafka Application Integration,4,18ywi8a,Python,https://www.reddit.com/r/Python/comments/18ywi8a/api_logic_server_kafka_application_integration/,3,"API Logic Server is an open source Python project that creates executable web app projects instantly from da database, with a single CLI command -- a JSON:API with Swagger, and a multi-page multi-table Admin App.  SQLAlchemy classes are created automatically.

Customize the project in your IDE using Python and rules.  Rules are spreadsheet-like assertions expressed in Python, implementing role-based row-level security, and multi-table constraint and derivation logic for database integrity.

You can extend the API with standard Flask and SQLAlchemy.  Application Integration is supported via APIs and Kafka Message handling.

Consulting and Training are available.

Links:

* \[Docs\]([https://apilogicserver.github.io/Docs/](https://apilogicserver.github.io/Docs/)) - includes 5 min video
* \[Application Integration\]([https://apilogicserver.github.io/Docs/Sample-Integration/](https://apilogicserver.github.io/Docs/Sample-Integration/))
* \[Rules\]([https://apilogicserver.github.io/Docs/Logic-Why/](https://apilogicserver.github.io/Docs/Logic-Why/))
* \[API\]([https://apilogicserver.github.io/Docs/API/](https://apilogicserver.github.io/Docs/API/))
* \[Admin Web App\](https://apilogicserver.github.io/Docs/Admin-Tour/)",1704424519.0
Statically enforcing frozen data classes in Python,36,18ybepc,Python,https://www.reddit.com/r/Python/comments/18ybepc/statically_enforcing_frozen_data_classes_in_python/,24,"Wrote a quick TIL on how to statically enforce frozen data classes in Python. Had to resort to crowd sourcing & good ol' stackoverflow to figure this one out since LLMs were of no help:

https://rednafi.com/python/statically_enforcing_frozen_dataclasses/",1704369273.0
GGUF LLAMA AI - Package for simplified text generation with Llama models quantized to GGUF format,10,18yijbp,Python,https://www.reddit.com/r/Python/comments/18yijbp/gguf_llama_ai_package_for_simplified_text/,3,"I'm looking for some developer who'd be interested in helping develop this simple project that tries to maximally simplify gguf models deployment on cpu to make this tech more accessible [https://github.com/laelhalawani/glai](https://github.com/laelhalawani/glai)  
It is a llama-ccp wrapper that simplifies use of llama based models.It features a built in ModelDB with json entries that can be used to automatically download and deploy quantized gguf models from hf.Then there are to classes AutoAI and EasyAI.The frist one takes min of 3 arguments including search query or path or url and max tokens and max input tokens. And that's all that's needed to load the model for inference.

The later allows configuration of the model in few simple steps. Giving more granular control, while still prioritizing simplicity. There's a bunch of examples and detailed documentation already.

The project is also published on pypi \`pip install glai\`",1704389139.0
Friday Daily Thread: r/Python Meta and Free-Talk Fridays,0,18ys8mu,Python,https://www.reddit.com/r/Python/comments/18ys8mu/friday_daily_thread_rpython_meta_and_freetalk/,2,"# Weekly Thread: Meta Discussions and Free Talk Friday üéôÔ∏è

Welcome to Free Talk Friday on /r/Python! This is the place to discuss the r/Python community (meta discussions), Python news, projects, or anything else Python-related!

## How it Works:

1. **Open Mic**: Share your thoughts, questions, or anything you'd like related to Python or the community.
2. **Community Pulse**: Discuss what you feel is working well or what could be improved in the /r/python community.
3. **News & Updates**: Keep up-to-date with the latest in Python and share any news you find interesting.

## Guidelines:

* All topics should be related to Python or the /r/python community.
* Be respectful and follow Reddit's [Code of Conduct](https://www.redditinc.com/policies/content-policy).

## Example Topics:

1. **New Python Release**: What do you think about the new features in Python 3.11?
2. **Community Events**: Any Python meetups or webinars coming up?
3. **Learning Resources**: Found a great Python tutorial? Share it here!
4. **Job Market**: How has Python impacted your career?
5. **Hot Takes**: Got a controversial Python opinion? Let's hear it!
6. **Community Ideas**: Something you'd like to see us do? tell us.

Let's keep the conversation going. Happy discussing! üåü",1704412869.0
Clickstream Aggregation in Python with Redis,0,18yjjow,Python,https://www.reddit.com/r/Python/comments/18yjjow/clickstream_aggregation_in_python_with_redis/,0,"This is a tutorial article on how you can use Redis PubSub capabilities with the Python streaming library Bytewax to aggregate clickstreams in Python. 

&#x200B;

https://redis.com/blog/redis-driven-dataflow-for-clickstream-aggregation-with-bytewax/",1704391621.0
Why Python is slower than Java?,377,18xfmq2,Python,https://www.reddit.com/r/Python/comments/18xfmq2/why_python_is_slower_than_java/,153,"Sorry for the stupid question, I just have strange question.

If CPython interprets Python source code and saves them as byte-code in .pyc and java does similar thing only with compiler, In next request to code, interpreter will not interpret source code ,it will take previously interpreted .pyc files ,  why python is slower here?

Both PVM and JVM will read  previously saved byte code then why JVM executes much faster than PVM?

Sorry for my english , let me know if u don't understand anything. I will try to explain",1704275050.0
Check Out Flasknotes - A Flask Note-Taking Web App!,11,18y3x63,Python,https://www.reddit.com/r/Python/comments/18y3x63/check_out_flasknotes_a_flask_notetaking_web_app/,4," **Hey Python enthusiasts!**

I'm excited to share my latest project, Flasknotes - a simple web-based note-taking application built using Flask and MySQL. This project boasts various features, including role-based authentication, CRUD operations, and the ability to mark your favorite notes.

**Project Links:**

* **GitHub Repository:** [Flasknotes GitHub Repo](https://github.com/ghandylan/flask-notes)
* **Live Demo:** [Flasknotes Demo](https://flasknotes.pythonanywhere.com/home)",1704341593.0
"Fast and secure routing development and OpenAPI bindings in sanic, flask, tornado, starlette",4,18y7t6j,Python,https://www.reddit.com/r/Python/comments/18y7t6j/fast_and_secure_routing_development_and_openapi/,0,"I created a library - [pait](https://github.com/so1n/pait), which is compatible with multiple Python web frameworks. At the same time, it has absorbed some excellent designs from FastAPI. Through pait, you can quickly and safely develop routing functions and view OpenAPI data.",1704355178.0
Fastest Way to Read Excel in Python,112,18xitr3,Python,https://hakibenita.com/fast-excel-python,27,,1704286723.0
Ezsynth -- Ebsynth Video Stylization as a Python Library.,5,18y13rv,Python,https://www.reddit.com/r/Python/comments/18y13rv/ezsynth_ebsynth_video_stylization_as_a_python/,3,"Hey all! I've been working on this project on and off for a few months, and for the most part, its pretty stable at this point.If you're familiar with the program ebsynth, you'll be right at home with Ezsynth.Ezsynth is a recreation of the ebsynth video stylization process, through the use of:

- a) The ebsynth.dll source code, interfaced through ctypes,

- b) RAFT Optical Flow,

and

- C) PhyCV physics based edge detection.

Ultimately the goal was to create a simple, pythonic way to achieve a similar output to the ebsynth program. Most current methods involve GUI mapping, etc, in order to make ebsynth work with python.

Ezsynth is a full recreation of the original ebsynth paper, offering both the original method of stylization, and updated versions using RAFT and various PhyCV features.

I've only been programming since April, most of my work is done by coming up with workflows, writing pseudo code, and then bouncing back and forth with GPT 4 on how to accomplish what I want. Check it [here](https://github.com/Trentonom0r3/Ezsynth), and I apologize for any noob mistakes or things you may find-- I'm still learning!

A demo of what it does can be found [here](https://github.com/Trentonom0r3/Ezsynth/blob/a3981fa3169fb076284fba432f239017e3d7e021/ezsynthdemo.mp4)=",1704333529.0
Simple keylogger made in Python,0,18y92tw,Python,https://www.reddit.com/r/Python/comments/18y92tw/simple_keylogger_made_in_python/,2,"Here is the repo: [https://github.com/Migue8gl/Python-scripts](https://github.com/Migue8gl/Python-scripts)

I am open to criticism on what I can improve in this small project. Over time I would like to create more Python scripts touching on different areas.I have to say that.

I'm not new to programming and I'm not new to Python either, but I'm sure I have some things wrong that can be fixed.",1704360336.0
"Thursday Daily Thread: Python Careers, Courses, and Furthering Education!",4,18xydsg,Python,https://www.reddit.com/r/Python/comments/18xydsg/thursday_daily_thread_python_careers_courses_and/,1,"# Weekly Thread: Professional Use, Jobs, and Education üè¢

Welcome to this week's discussion on Python in the professional world! This is your spot to talk about job hunting, career growth, and educational resources in Python. Please note, this thread is **not for recruitment**.

---

## How it Works:

1. **Career Talk**: Discuss using Python in your job, or the job market for Python roles.
2. **Education Q&A**: Ask or answer questions about Python courses, certifications, and educational resources.
3. **Workplace Chat**: Share your experiences, challenges, or success stories about using Python professionally.

---

## Guidelines:

- This thread is **not for recruitment**. For job postings, please see r/PythonJobs or the recruitment thread in the sidebar.
- Keep discussions relevant to Python in the professional and educational context.
  
---

## Example Topics:

1. **Career Paths**: What kinds of roles are out there for Python developers?
2. **Certifications**: Are Python certifications worth it?
3. **Course Recommendations**: Any good advanced Python courses to recommend?
4. **Workplace Tools**: What Python libraries are indispensable in your professional work?
5. **Interview Tips**: What types of Python questions are commonly asked in interviews?

---

Let's help each other grow in our careers and education. Happy discussing! üåü",1704326407.0
Knuckledragger: Experimenting with a Python Proof Assistant,10,18xn6ne,Python,https://www.reddit.com/r/Python/comments/18xn6ne/knuckledragger_experimenting_with_a_python_proof/,4,"Hi,

An idea I've toyed around for a while is how to chain together inferences of automated theorem provers like z3py into larger developments. I've started putting fingers to keyboard.

The point is to make something accessible to a larger, less specialized audience and to target mathematics akin to that in sympy, so I'm very interested in feedback about what works for people.

* Blog post: https://www.philipzucker.com/python-itp/

* Very WIP repo: https://github.com/philzook58/knuckledragger",1704298764.0
AWS Hosting Flask/Python Application on EC2 Instance,6,18xsn2l,Python,https://youtu.be/VFTeLN0J9Lw?si=kdOsJW004fnhzMWa,0,,1704312422.0
An AI Python Web app to analyze resumes,0,18yi41b,Python,https://www.reddit.com/r/Python/comments/18yi41b/an_ai_python_web_app_to_analyze_resumes/,13,"Hey r/python, say goodbye to tedious resume evaluations ‚Äì https://resume-analyzer.ploomberapp.io/. üåê  
What do you guys think?  
I wanted to supercharge my hiring process and make smarter decisions in a snap. I've connected this code, based on Open AI and on Streamlit. This Python code is open-sourced and is available in the [GitHub repo](https://github.com/gopiashokan/AI-Powered-Resume-Analyzer-and-LinkedIn-Scraper-with-Selenium). I've hosted it on Ploomber Cloud.  
",1704388089.0
Will Code for Free,0,18yimj6,Python,https://www.reddit.com/r/Python/comments/18yimj6/will_code_for_free/,63,"So, I've learned an ass-load about Python and I think I have a pretty good grasp on even some of the more advanced concepts, but I desperately need to apply what I've learned.

Does anyone have anything I can be of assistance with in return for just the hands-on experience?  Any suggestions where I should go to maybe find people who could use my assistance?  I willing to freakin' work for free.

&#x200B;

Update: I really appreciate the responses.  I've definitely worked on some of my own stuff, but I know I could learn a lot more and faster working with others.  I'm doing my best to get back to everyone who offered.  Thank you again everyone.",1704389354.0
"Pydantic has too much deprecation, making it difficult to keep up with updates and maintaining the code. Lots of functionality has been renamed, and some are removed during v1‚Üív2 transition. Even sample code from November 2023 is deprecated now! Are there better alternatives?",2,18xrc1y,Python,https://www.reddit.com/r/Python/comments/18xrc1y/pydantic_has_too_much_deprecation_making_it/,77,"Almost all tutorials I see online (and ChatGPT's knowledge base) teach you Pydantic v1. There are numerous things that are deprecated during transition to v2 (@root_validator, @validator, using 'always', etc. are all gone now.). I even found a code example on its Github from November 2023 which now throws an error, saying that FieldValidationInfo is deprecated now, use <new_thing> instead...
I wanted to use something to validate user inputs to my API, but getting Pydantic right and then keeping it updated has been too much unnecessary work, which makes me wonder if you have also faced this problem and what your solution is?",1704309333.0
"Okay, I have this genuine question, why does Python allow hashing functions?",134,18x4kw6,Python,https://www.reddit.com/r/Python/comments/18x4kw6/okay_i_have_this_genuine_question_why_does_python/,50,"So I was working on my programming language and was taking inspiration from Python, and realized that Python allows hashing functions and you can have functions As keys, this is what confuses me here what is the use of this, and how do they do it to begin with?

Like do they have something like a dictionary data structure that has Python objects as keys? That sounds like it's memory inefficient.

&#x200B;",1704239898.0
PyJigsaw: A Digital Jigsaw Puzzle Factory,14,18xglbx,Python,https://www.reddit.com/r/Python/comments/18xglbx/pyjigsaw_a_digital_jigsaw_puzzle_factory/,0,"I created a jigsaw puzzle constructor which uses mostly Python with a small assist from Inkscape. You can create SVG puzzle sets and templates programmatically, which could be useful as part of a jigsaw puzzle app (my original intention for it). I've shelved the wider project but the constructor was in a decent place, so decided to tidy it up and package it. Repo and install instructions are available on my [GitHub](https://github.com/tomdeabreucodes/PyJig).

If you're interested in a slightly longer post with some additional background, I also put a post up about it [here](https://tomdeabreu.uk/posts/jigsaw-puzzle-cut-template-svg/).

[blank cut template](https://preview.redd.it/esielejcf7ac1.png?width=1320&format=png&auto=webp&s=2c9ceb9e18c5c5ffa4c4b07bbfcf6963b35138f5)

&#x200B;

[Applied cut on image](https://preview.redd.it/0b5i72uef7ac1.png?width=1320&format=png&auto=webp&s=229a039f2fc9363060698044eccbd6833f524af1)

&#x200B;",1704278894.0
llama.cpp GGUF inference in a couple lines of code,7,18xk9eo,Python,https://www.reddit.com/r/Python/comments/18xk9eo/llamacpp_gguf_inference_in_a_couple_lines_of_code/,2,"&#x200B;

https://preview.redd.it/l4r0ne7tf8ac1.png?width=1296&format=png&auto=webp&s=932ff628716371aa4770e574df9134d30c2bc9f5

[txtai](https://github.com/neuml/txtai) has a unified LLM pipeline that can load Hugging Face models, llama.cpp GGUF files and LLM APIs. The example above downloads a GGUF file from the Hugging Face Hub and runs inference with the model. 

See this article for more: [https://neuml.hashnode.dev/integrate-llm-frameworks](https://neuml.hashnode.dev/integrate-llm-frameworks)",1704290994.0
Python GUI framework for windows applications and embedded systems.,27,18xav2l,Python,https://www.reddit.com/r/Python/comments/18xav2l/python_gui_framework_for_windows_applications_and/,24,"A few months ago I saw someone posting maybe here or in another subreddit about a Python framework for making GUIs. I distinctly remember that it can be used to make guis for embedded systems as well as something similar to windows apps.   


Unfortunately, I forgot the name of it and can't seem to find that post anywhere. Does anyone have any clues as to what this framework is called?

&#x200B;

Many thanks\~",1704257535.0
Polars DataFrames now have a `.plot` namespace!,233,18wti72,Python,https://www.reddit.com/r/Python/comments/18wti72/polars_dataframes_now_have_a_plot_namespace/,36,"As of Polars 0.20.3, you can use \`polars.DataFrame.plot\` to visualise your data.

The plotting logic isn't in Polars itself, but in hvplot (so you'll need that installed too)

&#x200B;

Here's some examples of what you can do:

https://preview.redd.it/h8fhtnvi02ac1.png?width=693&format=png&auto=webp&s=5a299bac0df26575f3a4efa071707061cea719c4

https://preview.redd.it/k2071pvi02ac1.png?width=728&format=png&auto=webp&s=3ed2ce9e07f39b7c694f4dc8648647bed34daa60

https://preview.redd.it/r8t6oovi02ac1.png?width=680&format=png&auto=webp&s=907461be7c05fdd63b1b469cd8fd5c24c2b9741d

https://preview.redd.it/bm8yuqvi02ac1.png?width=742&format=png&auto=webp&s=358da56c5c3e2d13bbf3576e655f3bc7b6e9d24a

https://preview.redd.it/mi0udtvi02ac1.png?width=734&format=png&auto=webp&s=160f01651d2723742630cb5af50a90c74972c8d4",1704213169.0
I made an IDE using PyQt6 [UPDATE],58,18wqxkm,Python,https://www.reddit.com/r/Python/comments/18wqxkm/i_made_an_ide_using_pyqt6_update/,9,"&#x200B;

[Editor](https://preview.redd.it/b79eg796g1ac1.png?width=1763&format=png&auto=webp&s=851ec11f48cc38652f96e4a515241dde89cf1705)

[Markdown Editing](https://preview.redd.it/pi26k767g1ac1.png?width=1920&format=png&auto=webp&s=5eea5ff8f5f595a238a1010fb643183251306965)

Highlighted Features:

* Supports up to 30 languages w Syntax highlighting
* auto complete
* split pane markdown editor
* terminal with Aura Text specific commands and also terminal history
* plugin support
* autocomplete (you can literally theme anything)

GitHub: [https://github.com/rohankishore/Aura-Text](https://github.com/rohankishore/Aura-Text)",1704206427.0
I made an Educational Deep Learning Framework from scratch,10,18x097o,Python,https://www.reddit.com/r/Python/comments/18x097o/i_made_an_educational_deep_learning_framework/,10,"Learning ML, I‚Äôve always been interested in **PyTorch** and its **Autograd engine** (which creates the backprop automatically).

In [this project](https://github.com/eduardoleao052/Autograd-from-scratch.git), I tried to **reimplement most of PyTorch** (including the Autograd) from scratch in a **well-documented, unit tested, and interpretable** way. It was really useful for me, and I hope it can help you understand Autograd better as well!

Hope you enjoy!

GitHub repository [here](https://github.com/eduardoleao052/Autograd-from-scratch.git)!",1704229366.0
üçÄ How to Create Stunning Music Posters in Seconds: Introducing BeatPrints!,15,18wq7ru,Python,https://www.reddit.com/r/Python/comments/18wq7ru/how_to_create_stunning_music_posters_in_seconds/,2,"&#x200B;

https://preview.redd.it/2ae0jplk91ac1.png?width=1280&format=png&auto=webp&s=d6c6b7276f42dac753eb309e47fa6b12f49a1672

**Ever wondered how to create music posters like the ones you see on Pinterest?** üé®

Maybe you've wanted something aesthetic to jazz up your Instagram stories or noticed your walls looking a tad empty? Perhaps you're the collector type or simply love decking out your space with artistic vibes? Look no further‚Äîintroducing BeatPrints! 

üé® **What's BeatPrints?**

BeatPrints is your one-stop tool for crafting eye-catching music posters that stand out! It's your gateway to generate custom, beautiful posters that capture the essence of your favorite music track from Spotify.

**ü§∑ Why you want to use it?** 

* **Ease of Use:** Say goodbye to complex design software‚ÄîBeatPrints makes poster creation straightforward and fun!
* **Aesthetic Appeal:** Create posters perfect that's for Instagram, Pinterest, or maybe sprucing up your living space.
* **Versatility:** Whether you're a collector, a decorator, or just love stylish visuals, BeatPrints has you covered.

üîó **GitHub Project Link:** [BeatPrints on GitHub](https://github.com/TrueMyst/BeatPrints)

Let BeatPrints transform your favourites music tracks into stunning posters! üé®‚ú®",1704204386.0
VLPC2.py released.,1,18x8n7j,Python,https://www.reddit.com/r/Python/comments/18x8n7j/vlpc2py_released/,1,"https://izecksohn.com/pedro/python/VLPC2/VLPC2.py

I needed an encryption script for very large binary files. So I created this. It was tested on PDF only. Please test it and report your experience.",1704250891.0
PyPy has moved to GitHub,228,18w45u2,Python,https://www.reddit.com/r/Python/comments/18w45u2/pypy_has_moved_to_github/,20,PyPy has moved its development efforts from Mercurial + Heptapod to Git + GitHub. Read more about it [here](https://www.pypy.org/posts/2023/12/pypy-moved-to-git-github.html),1704136748.0
Good pytube alternative?,2,18wzsg8,Python,https://www.reddit.com/r/Python/comments/18wzsg8/good_pytube_alternative/,6,"I was using pytube to download my Shazam library and, well, it worked; but the AdBlock blocker in YouTube broke everything. Pytube cannot skip the ads, but is actively downloading them.

Pytube seems discontinued. Does somebody know about a good alternative, or do I have to live without my downloader?",1704228257.0
Wednesday Daily Thread: Beginner questions,0,18x4mfq,Python,https://www.reddit.com/r/Python/comments/18x4mfq/wednesday_daily_thread_beginner_questions/,1,"# Weekly Thread: Beginner Questions üêç

Welcome to our Beginner Questions thread! Whether you're new to Python or just looking to clarify some basics, this is the thread for you.

## How it Works:

1. **Ask Anything**: Feel free to ask any Python-related question. There are no bad questions here!
2. **Community Support**: Get answers and advice from the community.
3. **Resource Sharing**: Discover tutorials, articles, and beginner-friendly resources.

## Guidelines:

* This thread is specifically for **beginner questions**. For more advanced queries, check out our [Advanced Questions Thread](#advanced-questions-thread-link).

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **What is the difference between a list and a tuple?**
2. **How do I read a CSV file in Python?**
3. **What are Python decorators and how do I use them?**
4. **How do I install a Python package using pip?**
5. **What is a virtual environment and why should I use one?**

Let's help each other learn Python! üåü",1704240010.0
Python's Array: Working With Numeric Data Efficiently,2,18wut5u,Python,https://realpython.com/python-array/,0,,1704216383.0
i made a ChatGPT bot for Telegram,4,18wq86m,Python,https://www.reddit.com/r/Python/comments/18wq86m/i_made_a_chatgpt_bot_for_telegram/,1,"This project utilizing the new Assistant OpenAl API.

link to source: https://github.com/andykras/gptbot

Bot is built using the async features of aiogram and AsyncOpenAl, showcasing modern asynchronous programming in Python.",1704204418.0
Arrest v0.1.5 is released! Including a lot of new improvements based on the community feedback!,15,18whybi,Python,https://www.reddit.com/r/Python/comments/18whybi/arrest_v015_is_released_including_a_lot_of_new/,3,"Hi everyone!

I am really happy to announce Arrest [v0.1.5](https://pypi.org/project/arrest/) after the overwhelming number of feedback from the community in my last post here. A brief overview of the changes made:

&#x200B;

* Added support for most of the httpx arguments (i.e., cookies, auth, transport, cert, etc) as kwargs in both service and resource initializations.
* Added backoff retries for all the http calls being made with configurable max retries (set as environment variable)
* Add a new decorator for a resource instance \`.handler(...)\` where you can specify the subpath from the resource and define your own custom function. The function is injected with a reference to the resource instance, and the complete url for easier access. The function can be triggered as a free function but also is registered under the resource instance, so can be invoked via \`resource\_name.func\_name(...)\`
* Added support for passing your own \`httpx.AsyncClient\` instance to either service or resource. (can also be a subclass of \`httpx.AsyncClient\`)

For more details, please check out the [docs](https://s-bose.github.io/arrest/).

[Github repo](https://github.com/s-bose/arrest) for anyone who wants to take a look!

Thank you to everyone whose feedback made these changes happen. I'd appreciate it if you could let me know of anything else that might be helpful to be implemented!",1704174330.0
Build amazing AI projects with Google‚Äôs Gemini models and Python,3,18wshab,Python,https://www.reddit.com/r/Python/comments/18wshab/build_amazing_ai_projects_with_googles_gemini/,1,"Hi everyone,

I‚Äôm excited to share with you my repository of Python projects and ideas that use Google‚Äôs latest and most powerful generative AI models: Gemini-pro and Gemini-pro-vision. These models can perform various tasks such as text-to-speech conversion, interactive chat, image and video processing, and content generation.

With my repository, you can:

* Convert any text into natural-sounding speech with Gemini-pro
* Chat with a friendly and engaging AI assistant powered by Gemini-pro-chat
* Recognize and analyze images and videos with Gemini-pro-vision
* Generate diverse and dynamic content such as poems, stories, code, essays, and more with Gemini-pro

My repository also provides educational insights and project ideas for students and researchers who want to learn more about Google‚Äôs Gemini models and their applications. You can explore the limitless possibilities of AI with Gemini and embark on a journey of innovation and discovery.

If you are interested, please check out my repository here: [https://github.com/GitCoder052023/Build-with-Gemini](https://github.com/GitCoder052023/Build-with-Gemini)

I would love to hear your feedback and suggestions on how to improve my projects and ideas. Feel free to leave a comment or open an issue on GitHub.

Thank you for your time and attention. I hope you enjoy building amazing AI projects with Gemini and Python. üòä",1704210586.0
I made a program that solves mazes from images!,80,18vz81t,Python,https://www.reddit.com/r/Python/comments/18vz81t/i_made_a_program_that_solves_mazes_from_images/,8,"It was made in Python, except for one file that was written in Cython.

You can read more about it here -> [https://github.com/triskj0/maze-solver](https://github.com/triskj0/maze-solver)

I'll be glad some of you guys check it out, and maybe even try it for yourself! I am, of course, open to any suggestions on how to continue improving it.

Have a nice day, everyone!",1704123668.0
"Hypercorn 0.16.0 released - a WSGI/ASGI server supporting HTTP 1, 2, 3 and Websockets",56,18vxfyu,Python,https://www.reddit.com/r/Python/comments/18vxfyu/hypercorn_0160_released_a_wsgiasgi_server/,12,"Hypercorn is a WSGI and ASGI server that supports HTTP/1, HTTP/2, HTTP/3, and WebSockets. It also supports asyncio, uvloop, and trio worker classes. 

This release:
 - Adds ProxyFixMiddleware to make it much easier to run Hypercorn behind a proxy with the headers pointing at the client rather than the proxy.
 - A max_requests config that forces workers to restart when hit. This helps with memory leaks as the restart frees any leaked memory. 
 - A max keep alive requests config that limits the requests per kept-alive connection. This mitigates the HTTP/2 rapid reset attack in the same manner as Nginx.
 - Finally fixes many bugs.

[Read more](https://github.com/pgjones/hypercorn/blob/main/CHANGELOG.rst).",1704118069.0
"Hey Guys! Just went looking back at older projects and found this one, its a level editor/maker!",8,18wbx3k,Python,https://www.reddit.com/r/Python/comments/18wbx3k/hey_guys_just_went_looking_back_at_older_projects/,4,"It is a 2d level maker that taught me more about how pygame works, now I use Godot but I really appreciate this project for how much it taught me. Just wanted feedback, I know it looks bad being just colored squares but the code is really were I think I did the best. I dunno I dont code for a living, perhaps its pathetic and worthy of public shamming, let me know what you guys think. 

[link](https://github.com/GithubUserNotABot/Level-maker/blob/main/main.py)",1704156468.0
"PDFSyntax, a new Python API library to inspect and update PDF files",13,18w5zj3,Python,https://www.reddit.com/r/Python/comments/18w5zj3/pdfsyntax_a_new_python_api_library_to_inspect_and/,3,"Hi!

This is my pet project, written from scratch because there is so much to discover and learn in the process. The focus is on API simplicity and incremental updates (a PDF feature that is often overlooked). Progress is slow because I do not have much spare time to work on this.

This ALPHA quality software is far from finished but I would love to hear some feedback and feature requests.

Here is the link to the project on GitHub: [https://github.com/desgeeko/pdfsyntax](https://github.com/desgeeko/pdfsyntax)

Regards",1704141321.0
What is SLOW_SUM in the CPython source code?,68,18vv3aa,Python,https://www.reddit.com/r/Python/comments/18vv3aa/what_is_slow_sum_in_the_cpython_source_code/,7,"File: `Python/bltinmodule.c` ([link to precise  line](https://github.com/python/cpython/blob/471aa752415029c508693fa7971076f5148022a6/Python/bltinmodule.c#L2551C9-L2551C17))

While reading CPython's source code I came across the `SLOW_SUM` symbol, but I couldn't find its definition. `SLOW_SUM` is referenced only once in the entire CPython source code, so I couldn't find any information on why it exists.

From the source code, I understand that it's a compiler flag that disables an optimization when performing sums on numeric types through the `sum()` built-in function. However, why would you pass `SLOW_SUM` to the compiler to disable optimized sums on numeric types?

I don't know if this is the right place to ask such a specific question. If it's not, can you point me to the right forum?",1704109171.0
Arezzo: Automatic polyphonic piano music transcription in Python,6,18wacbi,Python,https://www.reddit.com/r/Python/comments/18wacbi/arezzo_automatic_polyphonic_piano_music/,1," [https://github.com/Kat9-123/Arezzo](https://github.com/Kat9-123/Arezzo)

Through the power of Machine Learning‚Ñ¢ this program can take an audio file of (polyphonic) piano music and generate the corresponding sheet music!

The code is dodgy in places, and not very well documented. As this was a school project, I didn't spend as much time as I'd have liked to refine it, because I simply ran out of time and steam. Especially the bits added last are very messy.

Still, the UX is great, with a bunch of features easily accessible through a config file and command line switches.

This is my first project using ML and audio processing, so that may explain why it lacks in some departments.

So does it work? Sure, but not very well. Marginally worse than the free\* options I found online. *testing/results/TEST\_RESULTS\_V1.csv* contains some stats.

It does have quite some limitations, as is doesn't recognise rests, tempo changes (like rubato), dynamics, articulations, upbeats and more. These limitations are bad, but not catastrophic.

Oh and it actually generates MIDI files and uses MuseScore4 to generate the sheet music PDF's, but it does actually find key, tempo and time signature.

\**Not really of course*

**Please give feedback! :D**",1704152339.0
Tuesday Daily Thread: Advanced questions,3,18watqc,Python,https://www.reddit.com/r/Python/comments/18watqc/tuesday_daily_thread_advanced_questions/,0,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",1704153609.0
Yet another multidirectory/multirepository git runner.,5,18w4quj,Python,https://www.reddit.com/r/Python/comments/18w4quj/yet_another_multidirectorymultirepository_git/,9,"Hi, I made this thing for git: [https://github.com/jasursadikov/mud](https://github.com/jasursadikov/mud)

This tool allows you to run git commands in multiple repositories simultaneously. I was using other tools like that but mine has some features that I was looking for:

1. Asyncronous commands running
2. Nerd fonts to have some pretty view
3. Status table that shows what is going on with all repos that I have
4. Aliases, so I can safe 0.03125ms by avoiding typing long commands
5. Filtering. This tool can filter repos by branch/tag/modified/diverged
6. Global config and local configs.",1704138225.0
Get Surfline surf forecasts with python,6,18w31mr,Python,https://medium.com/@giocaizzi/get-surfline-surf-forecasts-with-python-93fe92230c01,10,,1704133934.0
I made a video showcasing the projects in 2023 using Python and Pygame!,26,18vtkcs,Python,https://www.reddit.com/r/Python/comments/18vtkcs/i_made_a_video_showcasing_the_projects_in_2023/,3,"You can watch it here - [https://youtu.be/o6ISmnLqVDQ](https://youtu.be/o6ISmnLqVDQ)

Source code for most of the project is available on my [GitHub page](https://github.com/robomarchello)

Happy New Year everyone!

And this is one of the projects:

[pressure soft body simulation](https://i.redd.it/872nmxhrts9c1.gif)",1704102567.0
Do You Ever del?,194,18vgrc9,Python,https://www.reddit.com/r/Python/comments/18vgrc9/do_you_ever_del/,118,"I've been coding in Python for years, mostly backend web-based stuff, but almost never `del` anything. Has anyone ever found interesting or compelling places to use it?",1704055700.0
Discover Your Personality Traits with Persai: A Python Package for detecting Big Five personality,0,18wvb6d,Python,https://www.reddit.com/r/Python/comments/18wvb6d/discover_your_personality_traits_with_persai_a/,5,"Greetings everyone,

I'm excited to introduce you to Persai, a Python package designed to provide deep insights into your personality.

Using the Big Five personality traits model, Persai can analyze your Twitter posts and give you a unique perspective on your personality. All you have to do is input the tweets.js file you get when you export your Twitter data, and Persai will return your Big Five data.

The technology behind Persai is GPT-4, and it's based on the findings from the paper ‚ÄúIs ChatGPT a Good Personality Recognizer? A Preliminary Study‚Äù.

For more information about Persai, you can check out the GitHub repository here: https://github.com/yachty66/persai

To delve deeper into what Persai can do, visit the website: https://www.persai.org/

Let's embark on this journey of self-discovery together! üß≠üíº",1704217566.0
URL-Shorter with Python,1,18w0tw8,Python,https://www.reddit.com/r/Python/comments/18w0tw8/urlshorter_with_python/,1,"Hi everyoen,  
I want to introduce my latest project, URL-Shorter;  
You can deploy your own url-shorter service with that repository.  
[https://github.com/uysalserkan/url-shorter](https://github.com/uysalserkan/url-shorter)",1704128106.0
chrono24 - a simple API wrapper for watch enthusiasts üïí,8,18vpdsd,Python,https://www.reddit.com/r/Python/comments/18vpdsd/chrono24_a_simple_api_wrapper_for_watch/,3,"The [Chrono24](https://www.chrono24.com/) [API wrapper](https://github.com/irahorecka/chrono24/) is designed for watch enthusiasts in the Python community. This library offers in-depth access to Chrono24's watch listings.

`pip install chrono24`, and explore brands and listings using simple Python commands:

    import chrono24
    
    for listing in chrono24(query=""Rolex DateJust"").search():
        print(listing)

Dive into one of the biggest timepiece markets with [chrono24](https://github.com/irahorecka/chrono24)

&#x200B;

**Edit:**

Given the constructive feedback from u/striata, the new API is as follows:

    import chrono24
    
    for listing in chrono24.query(""Rolex DateJust"").search():
        print(listing)",1704085053.0
DocFlow - Document Management API,43,18vcjrw,Python,https://www.reddit.com/r/Python/comments/18vcjrw/docflow_document_management_api/,9,"üöÄ Excited to announce the release of DocFlow - a Document Management API!

I have been working on this project from quite some tie now. And learnt a lot. Writing this post, just to share how year ended for me.

DocFlow is build using u/FastAPI, PostgreSQL, AWS S3, and Docker. It provides document's Upload, Download, Organization, Searching, Versioning, Sharing, Access Control List, Deletion, Archiving, Authentication and Authorization.

The complete documentation of the API and ways to test and run DocFlow is mentioned on the GitHub Repository. üñáÔ∏è [Here](https://github.com/jiisanda/docflow)

üì© I invite you to the repo, to do a code review, suggest changes and collaborate over the Discussions of [DocFlow](https://github.com/jiisanda/docflow/discussions).

Happy Coding üôÜ‚Äç‚ôÇÔ∏è!

**#DocFLow** **#DocumentManagement** **#API** **#release** **#github** **#fastapi** **#aws** **#docker** **#postgresql** **#awsservices** **#python**

[DocFlow](https://preview.redd.it/nlqs5ypm0o9c1.png?width=500&format=png&auto=webp&s=bf8aa96aa81771c6208703844c4f9e004d7259e9)",1704043671.0
"Xmas decoration, part 2",2,18vi8wx,Python,https://www.bitecode.dev/p/xmas-decoration-part-2,0,,1704060122.0
Monday Daily Thread: Project ideas!,0,18vkgtu,Python,https://www.reddit.com/r/Python/comments/18vkgtu/monday_daily_thread_project_ideas/,2,"# Weekly Thread: Project Ideas üí°

Welcome to our weekly Project Ideas thread! Whether you're a newbie looking for a first project or an expert seeking a new challenge, this is the place for you.

## How it Works:

1. **Suggest a Project**: Comment your project idea‚Äîbe it beginner-friendly or advanced.
2. **Build & Share**: If you complete a project, reply to the original comment, share your experience, and attach your source code.
3. **Explore**: Looking for ideas? Check out Al Sweigart's [""The Big Book of Small Python Projects""](https://www.amazon.com/Big-Book-Small-Python-Programming/dp/1718501242) for inspiration.

## Guidelines:

* Clearly state the difficulty level.
* Provide a brief description and, if possible, outline the tech stack.
* Feel free to link to tutorials or resources that might help.

# Example Submissions:

## Project Idea: Chatbot

**Difficulty**: Intermediate

**Tech Stack**: Python, NLP, Flask/FastAPI/Litestar 

**Description**: Create a chatbot that can answer FAQs for a website.

**Resources**: [Building a Chatbot with Python](https://www.youtube.com/watch?v=a37BL0stIuM)

# Project Idea: Weather Dashboard

**Difficulty**: Beginner

**Tech Stack**: HTML, CSS, JavaScript, API

**Description**: Build a dashboard that displays real-time weather information using a weather API.

**Resources**: [Weather API Tutorial](https://www.youtube.com/watch?v=9P5MY_2i7K8)

## Project Idea: File Organizer

**Difficulty**: Beginner

**Tech Stack**: Python, File I/O

**Description**: Create a script that organizes files in a directory into sub-folders based on file type.

**Resources**: [Automate the Boring Stuff: Organizing Files](https://automatetheboringstuff.com/2e/chapter9/)

Let's help each other grow. Happy coding! üåü",1704067208.0
Stockstir is a tool written in Python that lets you get stock information from any script at no cost - Version 2 is officially out!,53,18uuyjr,Python,https://www.reddit.com/r/Python/comments/18uuyjr/stockstir_is_a_tool_written_in_python_that_lets/,15,"Hello again! A few days ago I showcased my Stockstir project which I had made a while ago. You can refer to that thread [here](https://www.reddit.com/r/Python/comments/18sxqsc/stockstir_is_a_python_project_that_lets_you_get/).

V2 is out! You can take a look at the [documentation](https://stockstir.readthedocs.io/en/latest/index.html) for up-to-date information on the new functions, enhancements, and fixes in the project. 

Also, the project link is here: [Stockstir Link](https://github.com/PatzEdi/Stockstir)

As far as additions and suggestions which were made on the previous thread, Stockstir V2 now has a complete fail-safe system that uses more than one provider. It also has initial integration of an Alpha Vantage API (to be further developed still, now it is just an initial integration), and new options to gather prices and other stock info through CNBC and their JSON format API (Thank you to [Gr1pp717](https://www.reddit.com/user/Gr1pp717/) for that information!).

As far as the quick usage, nothing has changed:

```
import Stockstir

price = Stockstir.getSinglePrice(""ticker/stockSymbol"")

print(price)
```

With the new provider system, the default provider is still CNBC. However, you can set a provider manually (There are three as of now) like so:

```
from Stockstir import Providers

Providers.provider_number = 1 # Here, you can put any number that is between 0 and 2, as there are three providers now. The default remains 0.
```

The new fail-safe system automatically picks other providers in case one fails, bringing more reliability to the library as a whole.

If you want to manually check if providers are working, you can do this:

```
from Stockstir import Providers

Providers.runProviderChecks()
```

Hope you enjoy!

Edit: Some suggestions/improvements have already been suggested in one of the comments below, thank you so much for that information, super useful! Here is the [link of the improvements that will come soon to Stockstir V2](https://www.reddit.com/r/Python/comments/18uuyjr/comment/kfnju1d/?utm_source=share&utm_medium=web2x&context=3)",1703983989.0
I Created a game (kind of),1,18vattd,Python,https://www.reddit.com/r/Python/comments/18vattd/i_created_a_game_kind_of/,0,"I created a practice app to practice wordle (more specifically Duotrigordle), and I was wondering if anyone would be interested in playing it/testing it. Here's the github: [https://github.com/dcjvliet/Duotrigordle](https://github.com/dcjvliet/Duotrigordle)

The code's pretty messy, but it's all open source and I figured I might as well share it. If you do decide to play it, feel free to leave feedback here.",1704038865.0
Transfer YouTube History from One Channel to Another Channel Using Python,89,18upgvh,Python,https://www.reddit.com/r/Python/comments/18upgvh/transfer_youtube_history_from_one_channel_to/,34,"*Transfer YouTube History from One Account to Another Account Using Python.*

**Information:** There is no direct way to transport YouTube history from one account to another; you have to use Python to do it. It will take some time. - I've created a Python script that automates the transfer for you; it will take 10 seconds for each link.

**Advice:** Be aware that you will need to monitor the transport because YouTube will detect unusual traffic, and it will sign out all your logged-in accounts. Therefore, I ADVISE YOU TO SAVE YOUR PASSWORD if you don't know it.

**Preparation:**

1. Visual Studio Code
2. Google Chrome browser
3. MS Excel

**Exporting youtube history:** 

1. Go to [https://takeout.google.com](https://takeout.google.com/)
2. Choose the account (or brand account if you have more than one YouTube channel).
3. Click Deselect all. Check only: YouTube and YouTube Music section (Scroll to the end).
4. Click multiple formats: Scroll to history and change HTML to JSON, hit Ok.
5. Click All YouTube data included: Deselect all and choose only history.
6. Click next step.
7. Create export.
8. It will be sent to your email.
9. Create an empty folder called YoutubeHistory. This folder is for running every Python script that I will provide. 
10. Drag and drop the watch-history.json file into the YoutubeHistory folder.

**Convert JSON file to txt file using python:**

1. Create python script named: , save it in the YoutubeHistory folder.
2. Load this script and click save:

&#8203;

    import json
    
    # Load the JSON data from the file with specified encoding
    with open('watch-history.json', 'r', encoding='utf-8') as file:
        data = json.load(file)
    
    urls = []
    
    # Extract the URLs from the JSON data
    for item in data:
        if 'titleUrl' in item:
            urls.append(item['titleUrl'])
        if 'subtitles' in item:
            for subtitle in item['subtitles']:
                if 'url' in subtitle:
                    urls.append(subtitle['url'])
    
    # Save the URLs to a text file
    with open('urls.txt', 'w') as file:
        for url in urls:
            file.write(url + '\n')

Now click Ctrl+F5 to run the script. - You will get urls.txt file in the YoutubeHistory folder.

**MS Excel (Organizing the history from old to new and removing duplicates):**

First: You will need to remove the duplicates:

1. Copy the links from urls.txt and paste in a new excel work book. 
2. CTRL+A to select all. - Click data: Remove duplicates and hit ok.

Second: You will need to order the links (Old to New):

1. On column B: Number the links starting from 1.
2. CTRL+A to select all.
3. Click data: Sort.
4. Choose Sort by column B & Order by largest to smallest.

Third:

1. Now create txt file and name it Flipped.txt in the YoutubeHistory folder.
2. Copy the links from the excel file and paste them in Flipped.txt

**Transferring the history:**

1. Make sure you have selected the correct YouTube channel that you want to transfer to.
2. Open an empty tab in Chrome tab and keep it open.
3. Create python script named: automate\_youtube\_history.py , save it in the YoutubeHistory folder.
4. Load this script and click save:

&#8203;

    import webbrowser
    import time
    import pyautogui
    
    # Read the URLs from a text file
    with open('Flipped.txt', 'r') as file:
        urls = file.readlines()
        urls = [url.strip() for url in urls]
    
    # Open each URL in a web browser
    for url in urls:
        webbrowser.open(url)
        time.sleep(10)
        
        # Close the current tab (you might need to adjust the coordinates)
        pyautogui.hotkey('ctrl', 'w')  # This shortcut closes the current tab

Now click Ctrl+F5 to run the script.

**The process:**

I recommend that you monitor the process every hour or 30 minutes because after some time, you may get logged out from all your accounts (this happened to me after 2 hours).

If this occurs:

1. Stop the Python script from running.
2. Go to your watch history, and check the last video it stopped on.
3. Remove the links that were transferred successfully and keep the others.
4. Re-run the script.",1703969646.0
I shared a Python Course (1.5 hours) on YouTube,16,18v157k,Python,https://www.youtube.com/watch?v=VOdPQmm298o&list=PLTsu3dft3CWiow7L7WrCd27ohlra_5PGH&index=1,9,,1704002967.0
BALanced Execution through Natural Activation : a human-computer interaction methodology for code running,7,18v4yqg,Python,https://www.reddit.com/r/Python/comments/18v4yqg/balanced_execution_through_natural_activation_a/,1,"BALENA is a voice interaction framework utilizing state-of-the-art natural language processing and audio processing models to create a system that can interpret voice commands and associate them with predefined actions. The framework leverages the power of transformers and signal processing to understand user intent via spoken language and correlates them with a series of predefined actionable responses.

[Framework workflow](https://preview.redd.it/juxyviw4wl9c1.png?width=6130&format=png&auto=webp&s=ce2a4cd2ba32dc062a704a1544a48233319ef432)

## Features

* **Real-time audio streaming and recording**: Record audio from the microphone in real time for processing.
* **Speech recognition with Wav2Vec 2.0**: Use a pre-trained Wav2Vec 2.0 model to convert speech to text.
* **Text similarity and action triggering**: Encode the transcribed text to a vector space and find the closest action using sentence similarity techniques.
* **High-pass filtering**: Process the audio signal with a high-pass filter to enhance signal quality.
* **Auto-correction**: Utilize the Jaccard distance to correct words in the transcribed text auto-magically.
* **Framework flexibility**: Support for different device execution contexts, allowing for usage on both CPU and CUDA devices.

Link to the repo : [https://github.com/louisbrulenaudet/balena](https://github.com/louisbrulenaudet/balena)",1704018047.0
Sunday Daily Thread: What's everyone working on this week?,8,18utrn3,Python,https://www.reddit.com/r/Python/comments/18utrn3/sunday_daily_thread_whats_everyone_working_on/,10,"# Weekly Thread: What's Everyone Working On This Week? üõ†Ô∏è

Hello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!

## How it Works:

1. **Show & Tell**: Share your current projects, completed works, or future ideas.
2. **Discuss**: Get feedback, find collaborators, or just chat about your project.
3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.

## Guidelines:

* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.
* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.

## Example Shares:

1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!
2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.
3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!

Let's build and grow together! Share your journey and learn from others. Happy coding! üåü",1703980809.0
RecoverPy 2.1.5: Python file recovery tool,25,18uknqm,Python,https://www.reddit.com/r/Python/comments/18uknqm/recoverpy_215_python_file_recovery_tool/,4,"&#x200B;

https://i.redd.it/t1foxzpbvg9c1.gif

**Github**: [https://github.com/PabloLec/RecoverPy](https://github.com/PabloLec/RecoverPy)

Hey everyone!

I'm here to share something I've been working on for nearly three years now, RecoverPy, and its new 2.1.5 version. It's a nifty tool that can really be a lifesaver when you've accidentally deleted or overwritten files. It works its magic by conducting a text-based search to find the lost data.

It sports a TUI built with Textual. I found it to be quite enjoyable to use and it seems many others agree, given its rise as one of the most (or the most?) popular TUI libraries in Python, despite still being in beta.

Since its creation, RecoverPy has gone through quite a transformation. It's integrated lots of feedback from its user community, improved many aspects to enhance the user experience, and even underwent almost a full rewrite to switch up the TUI library in its second version. Essentially, it uses the strength of grep and dd to sift through partition blocks, giving you a user-friendly way to sift through the results.

Interestingly, it found a niche not only among individuals looking to recover files but has also piqued interest in the hacking scene, which was a bit of a pleasant surprise for me. It seems the tool lends itself well to that sphere too.

I manage to chip away at it from time to time, given that my free moments are becoming a bit of a rarity these days. It still has room to grow, and if anyone here feels like contributing, I'm more than open to collaborations. Your PRs would certainly be welcome!

Feel free to give it a glance, and if you find it interesting or useful, a star on the repository would be greatly appreciated.",1703957115.0
A small collection of lesser-known statistical functions - obscure_stats,84,18ubr4s,Python,https://www.reddit.com/r/Python/comments/18ubr4s/a_small_collection_of_lesserknown_statistical/,7,"Hello r/Python 

I‚Äôm excited to share with you my new python package  called `obscure_stats`. It is a collection of lesser-known statistical  functions that are not available in the standard libraries like `scipy`,  `statsmodels`, or `numpy`.

The package is still in development, but I hope you will find it useful and interesting. You can install it with  
`pip install obscure_stats`  
or check out the source code on [GitHub](https://github.com/glevv/obscure_stats).

I would appreciate any feedback, suggestions, or bug reports.",1703927876.0
Paracelsus: Visualize SQLAlchemy Databases using Mermaid or Dot Diagrams.,10,18uh43x,Python,https://github.com/tedivm/paracelsus,0,,1703947414.0
My first public package: wigner-symbols,0,18ux6et,Python,https://www.reddit.com/r/Python/comments/18ux6et/my_first_public_package_wignersymbols/,2,"Hi everyone!

I would like to share my first public repository with you all: [wigner-symbols](https://github.com/sheodun/wigner-symbols).

This package just calculates Wigner [3j](https://en.wikipedia.org/wiki/3-j_symbol) and [6j](https://en.wikipedia.org/wiki/6-j_symbol) symbols, which are commonly used in quantum mechanics for calculating coefficients of angular momentum coupling.

I come from a research background and often relied on a [very good site](https://www-stone.ch.cam.ac.uk/wigner.shtml) to check these symbol values, but I would rather use a python package; so I decided to make my own.

It is a small repo and there isn't much here at the moment but it performs the job.

I would really appreciate your feedback.

Thank you!

Edit: I have not been able to publish the package on PyPi yet as registration is temporarily suspended but I plan to once we are able to again",1703990348.0
The Python Mega Course is still free on Udemy,911,18tn8y0,Python,https://www.reddit.com/r/Python/comments/18tn8y0/the_python_mega_course_is_still_free_on_udemy/,136,"As some of you may know, ""**The Python Mega Course: Build 10 Real World Applications**"" is one of the top Python courses on Udemy. Last year, I made that version of the course available for free to the Reddit community, and I am doing the same today. 

 In 2023, the course attracted 20,000+ students and collected 900+ reviews, achieving an exceptionally high average rating of 4.8/5 on Udemy. This makes the course exceptionally highly rated on Udemy.

**How can you get the course for free today?**

Three simple steps:

1. Login to Udemy.
2. Go to the course page: [https://udemy.com/course/former-python-mega-course-build-10-real-world-applications/](https://udemy.com/course/former-python-mega-course-build-10-real-world-applications/)
3. Enter the password **mega\_course** to get the course for free.

Thanks and have a relaxing end of the year!",1703856866.0
ChatGPT API Basics for Developers (in Python),0,18v3v7n,Python,https://www.tomaspanik.eu/en/posts/chatgpt-api/,2,,1704013460.0
Grep over IPython output!,9,18ufgl3,Python,https://www.reddit.com/r/Python/comments/18ufgl3/grep_over_ipython_output/,2,"Hi there! i just finish a little project allowing you to use `grep` over IPython output like so:
```ipython
In [1]: {i:i for i in range(3)}
Out[1]:
{0: 0,
1: 1,
2: 2,
}
In [2]: %greps 1
Out[2]: ' 1: 1,\n'
```

[https://github.com/royreznik/greps](https://github.com/royreznik/greps)",1703942260.0
CPython Type System Internals: Video Series,3,18uhack,Python,https://codeconfessions.substack.com/p/cpython-type-system-internals-video,0,,1703947918.0
A Free AI Scribe Project I am Working on! Please Provide Feedback!,2,18ujbet,Python,https://www.reddit.com/r/Python/comments/18ujbet/a_free_ai_scribe_project_i_am_working_on_please/,0,"Thought I would share a project that I have been working on. AI medical scribe products have popped up everywhere but have been very expensive to deploy. I wrote a program that can connect with a local server running a version of ChatGPT and Speech-To-Text that can take a conversation via microphone and create a SOAP note. You can turn off the AI scribe and use it in a normal chat-based manner. The LLM variables are locked in on the executable option since I wrote this for an end-user physician.

Looking for any feedback (I am very much an amateur) from the community! What proved to be a bit tricky was developing a client that could use the device's microphone.

[https://github.com/1984Doc/AI-Scribe](https://github.com/1984Doc/AI-Scribe)",1703953576.0
Less is More? An Empirical Study on Configuration Issues in Python PyPI Ecosystem,5,18ubs0y,Python,https://www.reddit.com/r/Python/comments/18ubs0y/less_is_more_an_empirical_study_on_configuration/,2," The utilization of third-party libraries can potentially lead to conflicts in dependencies, prompting researchers to develop dependency conflict detectors.  Specifically, the researchers propose PyCon, a source-level detector, for detecting potential configuration issues.

[https://arxiv.org/abs/2310.12598](https://arxiv.org/abs/2310.12598)

&#x200B;",1703927988.0
UdemyPy - The Free Udemy courses bot,1,18ui5nc,Python,https://www.reddit.com/r/Python/comments/18ui5nc/udemypy_the_free_udemy_courses_bot/,1,"UdemyPy is an open-source Python project with the mission of making education accessible to everybody. It brings free Udemy courses directly to you on [WhatsApp](https://www.whatsapp.com/channel/0029VaHwvWZ7NoZsk8UOUl0z) and [Telegram](https://t.me/freecourses000).

# How it Works

UdemyPy scours the web for Udemy courses offering a 100% discount, ensuring you have access to a diverse range of subjects in any language.

When looking for free courses shared by UdemyPy, remember to check  the offer time left. Once it‚Äôs expired, the course will no longer be  free.

Whenever you find a course you like, click on the link and  enroll in it. Despite the fact that courses are free only for a limited  amount of time, once you are enrolled *they will be yours forever!*

# Why UdemyPy?

* Free of Charge: No payment methods needed; just create a Udemy account.
* Unrestricted Learning: Explore courses in any category or language.
* Supportive: UdemyPy supports content creators in reaching a wider audience.

# Learn More

Explore the project on [GitHub](https://github.com/dylannalex/udemypy). Feel free to show your support with a üåü if you find the project intriguing!",1703950396.0
Coding year in review 2023!,1,18uhdfv,Python,https://www.reddit.com/r/Python/comments/18uhdfv/coding_year_in_review_2023/,1," 

Love to hear your thoughts on last year with coding and coming year. Here's to our first script of 2024!

https://www.youtube.com/watch?v=YcmKs2M1xAo",1703948179.0
"Curser, and other AI code editors",1,18ufktx,Python,https://www.reddit.com/r/Python/comments/18ufktx/curser_and_other_ai_code_editors/,5,Do you use these types of tool editors to help write code more effectively/efficiently?  What are you using?,1703942655.0
How to prevent python software from being reverse engineered or pirated?,426,18tdmiv,Python,https://www.reddit.com/r/Python/comments/18tdmiv/how_to_prevent_python_software_from_being_reverse/,239,"I have a program on the internet that users pay to download and use. I'm thinking about adding a free trial, but I'm very concerned that users can simply download the trial and bypass the restrictions. The program is fully offline and somewhat simple. It's not like you need an entire team to crack it.

In fact, there is literally a pyinstaller unpacker out there that can revert the EXE straight back to its python source code. I use pyinstaller.

Anything I can do? One thing to look out for is unpackers, and the other thing is how to make it difficult for Ghidra for example to reverse the program.

Edit: to clarify, I can't just offer this as an online service/program because it requires interaction with the user's system. ",1703822214.0
CRAP - Clear Redundant Added Packages,19,18tqu9m,Python,https://www.reddit.com/r/Python/comments/18tqu9m/crap_clear_redundant_added_packages/,12,"[https://github.com/ValdonVitija/crap](https://github.com/ValdonVitija/crap)

Automatically clear redundant packages from virtual environments in python üêçüì¶üóëÔ∏è.",1703866845.0
Jake: A Free Alternative to Linktree Using GitHub Pages,51,18tkf7e,Python,https://www.reddit.com/r/Python/comments/18tkf7e/jake_a_free_alternative_to_linktree_using_github/,22,"Hello,

I wanted to share a new Python project I've been working on called Jake. It's an alternative to popular link aggregator services like Linktree and OneLink. Jake leverages the power of GitHub Pages to provide you with a hassle-free way to create your one-link website. The best part? It won't cost you a dime!

With Jake, you can easily showcase all your important links and content in one central hub, neatly organized and easily accessible. Your website will have a sleek URL in the format of ""username.github.io,"" giving it a professional touch.

Jake is completely written in Python and uses the \`tinyhtml\` library to generate static HTML websites. Simply fill in the \`data.toml\` file with your information, and Jake will automatically build and deploy your website to GitHub Pages using a GitHub action.

To give you a taste of what Jake can do, I've prepared a demo project for you to explore. Just visit [https://thevahidal.github.io/jake](https://thevahidal.github.io/jake) and see the potential for yourself.

If you're interested in contributing or want to dive deeper into the project, you can find the Jake repository on GitHub at [https://github.com/thevahidal/jake](https://github.com/thevahidal/jake). I welcome all contributions, feedback, and bug reports. Your input will help shape the future of Jake and make it even better.

Thank you for taking the time to read about Jake. I can't wait to see what we can achieve together.

Best regards,  
Al",1703846848.0
"Tastymap, create/customize matplotlib color palettes for your palate",8,18tvpdz,Python,https://www.reddit.com/r/Python/comments/18tvpdz/tastymap_createcustomize_matplotlib_color/,0,"The number of colormaps matplotlib felt limiting to me so I created a web app and Python package to customize existing colormaps or start from scratch!

    from tastymap import cook_tmap
    tmap = cook_tmap(
        [""red"", ""green"", ""blue""], num_colors=256, reverse=True
    )

Install by: \`pip install tastymap\` or try it online here: [TastyKitchen - a Hugging Face Space by ahuang11](https://huggingface.co/spaces/ahuang11/tastykitchen)

[TastyKitchen](https://i.redd.it/hf6fm1ukga9c1.gif)

Docs here: [TastyMap (ahuang11.github.io)](https://ahuang11.github.io/tastymap/)

Code here: [ahuang11/tastymap: colormaps cooked for your palate (github.com)](https://github.com/ahuang11/tastymap)

There's also a way to have AI suggest a colormap based on a description:

    from tastymap import ai
    tmap = ai.suggest_tmap(""Pikachu"")
    tmap

[Pikachu](https://preview.redd.it/3clppe0pga9c1.png?width=512&format=png&auto=webp&s=82b5570b05cd3b1f07683a7b837860d4442ce9ff)",1703879462.0
Understanding Numeric Data Types in Python,8,18tuy3y,Python,https://fullspeedpython.com/articles/understanding-numeric-data-types/,0,,1703877485.0
No formal schooling,15,18ton3n,Python,https://www.reddit.com/r/Python/comments/18ton3n/no_formal_schooling/,41,"I‚Äôm been doing a lot of at home python training in my free time. I do have an associates degree but it‚Äôs in an entirely unrelated field. I‚Äôm just wondering what the job market would like for me with no degree in the python field. I‚Äôve heard that some places only care if you actually know the material, regardless of formal education.",1703860978.0
UniDep: Unified Conda and Pip dependency management via pyproject.toml,6,18tx3pm,Python,https://www.reddit.com/r/Python/comments/18tx3pm/unidep_unified_conda_and_pip_dependency/,1,"[UniDep](https://github.com/basnijholt/unidep) streamlines Python project dependency management by unifying Conda and Pip packages in a single system.

Handling dependencies in Python projects can be challenging, especially when juggling Python and non-Python packages.This often leads to confusion and inefficiency, as developers juggle between multiple dependency files.

- **üìù Unified Dependency File**: Use either `requirements.yaml` or `pyproject.toml` to manage both Conda and Pip dependencies in one place.
- **‚öôÔ∏è Build System Integration**: Integrates with Setuptools and Hatchling for automatic dependency handling during `pip install ./your-package`.
- **üíª One-Command Installation**: `unidep install` handles Conda, Pip, and local dependencies effortlessly.
- **üè¢ Monorepo-Friendly**: Render (multiple) `requirements.yaml` or `pyproject.toml` files into one Conda `environment.yaml` file and maintain fully consistent global *and* per sub package `conda-lock` files.
- **üåç Platform-Specific Support**: Specify dependencies for different operating systems or architectures.
- **üîß `pip-compile` Integration**: Generate fully pinned `requirements.txt` files from `requirements.yaml` or `pyproject.toml` files using `pip-compile`.
- **üîí Integration with `conda-lock`**: Generate fully pinned `conda-lock.yml` files from (multiple) `requirements.yaml` or `pyproject.toml` file(s), leveraging `conda-lock`.

### Example
#### Example `requirements.yaml`

Example of a `requirements.yaml` file:

```yaml
name: example_environment
channels:
  - conda-forge
dependencies:
  - numpy                   # same name on conda and pip
  - conda: python-graphviz  # When names differ between Conda and Pip
    pip: graphviz
  - pip: slurm-usage >=1.1.0,<2  # pip-only
  - conda: mumps                 # conda-only
  # Use platform selectors
  - conda: cuda-toolkit =11.8    # [linux64]
local_dependencies:
  - ../other-project-using-unidep     # include other projects that use unidep
  - ../common-requirements.yaml       # include other requirements.yaml files
  - ../project-not-managed-by-unidep  # üö® Skips its dependencies!
platforms:  # (Optional) specify platforms that are supported (used in conda-lock)
  - linux-64
  - osx-arm64
```

> `unidep` can process this during `pip install` and create a Conda installable `environment.yaml` or `conda-lock.yml` file, and more!

> For a more in-depth example containing multiple installable projects, see the [`example`](https://github.com/basnijholt/unidep/tree/main/example) directory.

#### Example `pyproject.toml`

***Alternatively***, one can fully configure the dependencies in the `pyproject.toml` file in the `[tool.unidep]` section:

```toml
[tool.unidep]
channels = [""conda-forge""]
dependencies = [
    ""numpy"",                                         # same name on conda and pip
    { conda = ""python-graphviz"", pip = ""graphviz"" }, # When names differ between Conda and Pip
    { pip = ""slurm-usage >=1.1.0,<2"" },              # pip-only
    { conda = ""mumps"" },                             # conda-only
    { conda = ""cuda-toolkit =11.8:linux64"" }         # Use platform selectors by appending `:linux64`
]
local_dependencies = [
    ""../other-project-using-unidep"",   # include other projects that use unidep
    ""../common-requirements.yaml""      # include other requirements.yaml files
    ""../project-not-managed-by-unidep"" # üö® Skips its dependencies!
]
platforms = [ # (Optional) specify platforms that are supported (used in conda-lock)
    ""linux-64"",
    ""osx-arm64""
]
```

This data structure is *identical* to the `requirements.yaml` format, with the exception of the `name` field and the [platform selectors](#platform-selectors).
In the `requirements.yaml` file, one can use e.g., `# [linux64]`, which in the `pyproject.toml` file is `:linux64` at the end of the package name.


Check out https://github.com/basnijholt/unidep",1703883055.0
Voicebox: Python TTS lib with built-in audio effects,5,18tv650,Python,https://www.reddit.com/r/Python/comments/18tv650/voicebox_python_tts_lib_with_builtin_audio_effects/,0,"Hello there, I'm sharing a project I've been working on for some future robotics projects, and would appreciate some feedback.

It's called [Voicebox](https://voicebox.readthedocs.io) ([GitHub](https://github.com/austin-bowen/voicebox)), and it's a Python library that essentially provides wrappers for a bunch of different text-to-speech programs/APIs, and includes lots of built-in audio effects like vocoder, ring mod, glitch, etc. It also includes [example voices](https://voicebox.readthedocs.io/en/stable/voicebox.examples.html) like Star Wars battle droid, GlaDOS, and 343 Guilty Spark. Audio samples [here](https://voicebox.readthedocs.io/en/stable/samples.html).

The ""problem"" I was trying to solve was that a lot of TTS programs sound *too* realistic now, and I want an easy way to make audio from TTS sound more fun/robotic.

There are also utilities like [`reliable_tts`](https://voicebox.readthedocs.io/en/stable/voicebox.html#voicebox.utils.reliable_tts) and [`ParallelVoicebox`](https://voicebox.readthedocs.io/en/stable/voicebox.voiceboxes.html#voicebox.voiceboxes.parallel.ParallelVoicebox) that make it easy to build responsive and robust TTS systems, which is important for robot projects.

LMK what you think!

&#x200B;

Example: Use gTTS with a vocoder effect to speak in a robotic voice

    from voicebox import SimpleVoicebox
    from voicebox.tts import gTTS
    from voicebox.effects import Vocoder, Normalize
    
    voicebox = SimpleVoicebox(
        tts=gTTS(),
        effects=[Vocoder.build(), Normalize()],
    )
    
    voicebox.say('Hello, world! How are you today?')",1703878059.0
A Python monorepo template,6,18trmnq,Python,https://www.reddit.com/r/Python/comments/18trmnq/a_python_monorepo_template/,4,"Hey all! üëã Just wanted to share a Python monorepo template I've been working on. It's designed to streamline managing multiple packages in one place. I've incorporated tools like Poetry, Black, mypy, and Ruff for setup and linting, plus my personal touch with [Breadcrumbs](https://github.com/niqodea/breadcrumbs) for cleaner path management. Happy to hear your feedback or ideas!

Check it out here: https://github.com/niqodea/python-monorepo",1703868920.0
